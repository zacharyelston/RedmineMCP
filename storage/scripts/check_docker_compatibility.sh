#!/bin/bash
# Script to check Docker compatibility and debug common issues

set -e

# Print system information
echo "üîç System Information"
echo "===================="
uname -a

# Check Docker version
echo ""
echo "üê≥ Docker Information"
echo "===================="
if command -v docker &> /dev/null; then
    docker --version
    docker info 2>/dev/null | grep -E "Architecture|Operating System" || echo "Could not get detailed Docker info"
else
    echo "‚ùå Docker not found. Please install Docker first."
    exit 1
fi

# Check Docker Compose version
echo ""
echo "üîÑ Docker Compose Information"
echo "==========================="
if command -v docker-compose &> /dev/null; then
    docker-compose --version
else
    echo "‚ùå Docker Compose not found. Please install Docker Compose first."
    exit 1
fi

# Check if docker is running
echo ""
echo "üèÉ Docker Status"
echo "==============="
if docker info &> /dev/null; then
    echo "‚úÖ Docker daemon is running."
else
    echo "‚ùå Docker daemon is not running. Please start Docker first."
    exit 1
fi

# Check for ARM64 compatibility issues
echo ""
echo "üñ•Ô∏è Architecture Check"
echo "==================="
ARCH=$(uname -m)
if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
    echo "üîç Detected ARM64 architecture (Apple Silicon / ARM64)"
    echo "‚ÑπÔ∏è Some compatibility fixes will be applied for ARM64 systems."
    IS_ARM64=true
else
    echo "üîç Detected x86_64/AMD64 architecture"
    echo "‚ÑπÔ∏è Standard Docker configuration should work without issues."
    IS_ARM64=false
fi

# Display Docker images
echo ""
echo "üì¶ Docker Images"
echo "==============="
docker images | head -20

# Display running containers
echo ""
echo "üè≠ Running Containers"
echo "==================="
docker ps

# Check for known issues
echo ""
echo "üîç Checking for known issues..."
echo ""

# Check if redmine-local is running
if docker ps | grep -q redmine-local; then
    echo "‚úÖ Redmine container is running."
    
    # Test Redmine connectivity
    echo "‚ÑπÔ∏è Testing Redmine HTTP connection..."
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000; then
        echo "‚úÖ Redmine is accessible via HTTP."
    else
        echo "‚ö†Ô∏è Redmine is running but HTTP connection failed."
        echo "‚ÑπÔ∏è This could be due to Redmine still starting up."
    fi
else
    echo "‚ö†Ô∏è Redmine container is not running."
    
    # Check if it exists but is stopped
    if docker ps -a | grep -q redmine-local; then
        echo "‚ÑπÔ∏è Redmine container exists but is not running."
        echo "üìã Last logs from Redmine container:"
        docker logs --tail 20 redmine-local 2>/dev/null || echo "Could not get logs."
    else
        echo "‚ÑπÔ∏è No Redmine container found."
    fi
fi

# Check if mcp-extension-local is running
if docker ps | grep -q mcp-extension-local; then
    echo "‚úÖ MCP Extension container is running."
    
    # Test MCP Extension connectivity
    echo "‚ÑπÔ∏è Testing MCP Extension HTTP connection..."
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:9000; then
        echo "‚úÖ MCP Extension is accessible via HTTP."
    else
        echo "‚ö†Ô∏è MCP Extension is running but HTTP connection failed."
    fi
else
    echo "‚ö†Ô∏è MCP Extension container is not running."
    
    # Check if it exists but is stopped
    if docker ps -a | grep -q mcp-extension-local; then
        echo "‚ÑπÔ∏è MCP Extension container exists but is not running."
        echo "üìã Last logs from MCP Extension container:"
        docker logs --tail 20 mcp-extension-local 2>/dev/null || echo "Could not get logs."
    else
        echo "‚ÑπÔ∏è No MCP Extension container found."
    fi
fi

# Check docker-compose.local.yml
echo ""
echo "üìÑ Checking docker-compose.local.yml"
echo "================================="
if [ -f ./docker-compose.local.yml ]; then
    echo "‚úÖ docker-compose.local.yml exists."
    
    # Check for ARM64 compatibility issues in the file
    if [ "$IS_ARM64" = true ]; then
        echo "‚ÑπÔ∏è Checking for ARM64 compatibility issues in docker-compose.local.yml..."
        
        # Look for potentially problematic settings
        if grep -q "service_healthy" docker-compose.local.yml; then
            echo "‚ö†Ô∏è Found 'service_healthy' condition which might cause issues on ARM64."
            echo "‚ÑπÔ∏è Consider replacing with simple 'depends_on' without conditions."
        else
            echo "‚úÖ No problematic 'service_healthy' condition found."
        fi
    fi
else
    echo "‚ùå docker-compose.local.yml not found in the current directory."
fi

# Check credentials.yaml
echo ""
echo "üìÑ Checking credentials.yaml"
echo "========================="
if [ -f ./credentials.yaml ]; then
    echo "‚úÖ credentials.yaml exists."
    
    # Check for test values
    if grep -q "test-redmine-instance" credentials.yaml; then
        echo "‚ÑπÔ∏è credentials.yaml contains test Redmine URL."
    fi
else
    echo "‚ùå credentials.yaml not found in the current directory."
    
    if [ -f ./credentials.yaml.example ]; then
        echo "‚ÑπÔ∏è credentials.yaml.example exists. Run setup_redmine.sh to create credentials.yaml."
    fi
fi

echo ""
echo "‚úÖ Docker compatibility check complete."
echo "‚ÑπÔ∏è Use this information to diagnose any issues with Docker setup."