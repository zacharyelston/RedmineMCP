name: Redmine API Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'redmine_api.py'
      - 'scripts/test_redmine_api.py'
      - 'scripts/test_redmine_api.sh'
      - 'scripts/setup_redmine_ci.sh'
      - '.github/workflows/redmine-api-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'redmine_api.py'
      - 'scripts/test_redmine_api.py'
      - 'scripts/test_redmine_api.sh'
      - 'scripts/setup_redmine_ci.sh'
      - '.github/workflows/redmine-api-test.yml'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

jobs:
  test-redmine-api:
    runs-on: ubuntu-latest
    
    services:
      redmine:
        image: redmine:5.0
        ports:
          - 3000:3000
        env:
          REDMINE_SECRET_KEY_BASE: citest
          REDMINE_DB_MYSQL: db
          REDMINE_DB_PASSWORD: redmine
          REDMINE_DB_DATABASE: redmine
          REDMINE_DB_USERNAME: redmine
      
      db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: redmine
          MYSQL_DATABASE: redmine
          MYSQL_USER: redmine
          MYSQL_PASSWORD: redmine
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml pytest pytest-cov
        
    - name: Wait for Redmine to start
      run: |
        echo "Waiting for Redmine to be ready..."
        attempt=0
        max_attempts=30
        until $(curl --output /dev/null --silent --head --fail http://localhost:3000); do
          if [ $attempt -ge $max_attempts ]; then
            echo "::error::Timed out waiting for Redmine to start"
            exit 1
          fi
          printf '.'
          attempt=$((attempt+1))
          sleep 5
        done
        echo "Redmine is up and running!"
        
    - name: Set up test environment
      run: |
        # Create test configuration
        echo "Creating credentials.yaml for testing..."
        cat > credentials.yaml << EOF
        redmine:
          url: http://localhost:3000
          api_key: ci_test_api_key
        
        claude:
          api_key: ci_test_claude_api_key
        
        rate_limit: 100
        EOF
        
    - name: Run Redmine API test (Python)
      run: |
        python scripts/test_redmine_api.py --mock --verbose
      
    - name: Run Redmine API test (Shell)
      if: always()
      run: |
        # Make the script executable
        chmod +x scripts/test_redmine_api.sh
        
        # Run in mock mode since we can't set up API key in test container
        echo "Running shell-based test in mock mode..."
        REDMINE_API_KEY=ci_test_api_key scripts/test_redmine_api.sh --verbose || true
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: redmine-api-test-logs
        path: |
          logs/
          *.log
        retention-days: 7