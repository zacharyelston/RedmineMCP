name: Redmine API Connection Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test-redmine-api:
    runs-on: ubuntu-latest
    services:
      # Run a Redmine container for testing
      redmine:
        image: redmine:5.0
        ports:
          - 3000:3000
        env:
          REDMINE_DB_POSTGRES: postgres
          REDMINE_DB_DATABASE: redmine
          REDMINE_DB_USERNAME: redmine
          REDMINE_DB_PASSWORD: redmine_password
          REDMINE_SECRET_KEY_BASE: a_random_secret_key_for_testing_only
      
      # Database for Redmine
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: redmine
          POSTGRES_PASSWORD: redmine_password
          POSTGRES_DB: redmine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          # Additional tools for testing
          apt-get update && apt-get install -y curl jq
      
      - name: Wait for Redmine to start
        run: |
          echo "Waiting for Redmine to start up..."
          timeout 120 bash -c 'until $(curl --output /dev/null --silent --head --fail http://localhost:3000); do printf "."; sleep 5; done'
          echo "Redmine is up and running!"
          # Give Redmine a bit more time to fully initialize
          sleep 10
      
      - name: Set up Redmine API key
        run: |
          # Get the authenticity token
          LOGIN_PAGE=$(curl -s -c cookies.txt http://localhost:3000/login)
          CSRF_TOKEN=$(echo "$LOGIN_PAGE" | grep -o 'name="authenticity_token" value="[^"]*"' | sed 's/name="authenticity_token" value="//;s/"$//')
          
          # Login as admin
          curl -s -b cookies.txt -c cookies.txt -X POST http://localhost:3000/login \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "username=admin&password=admin&authenticity_token=$CSRF_TOKEN"
          
          # Get the my account page to navigate to API keys
          MY_ACCOUNT_PAGE=$(curl -s -b cookies.txt http://localhost:3000/my/account)
          
          # Go to API keys page
          API_KEYS_PAGE=$(curl -s -b cookies.txt http://localhost:3000/my/api_key)
          
          # Generate a new API key
          API_KEY_PAGE_CSRF_TOKEN=$(echo "$API_KEYS_PAGE" | grep -o 'name="authenticity_token" value="[^"]*"' | sed 's/name="authenticity_token" value="//;s/"$//')
          
          RESULT=$(curl -s -b cookies.txt -c cookies.txt -X POST http://localhost:3000/my/api_key \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "authenticity_token=$API_KEY_PAGE_CSRF_TOKEN&key_action=generate")
          
          # Extract the new API key
          API_KEY=$(echo "$RESULT" | grep -o 'Your API key: [^<]*' | sed 's/Your API key: //')
          
          # Create credentials file
          cat > credentials.yaml << EOL
          redmine_url: http://localhost:3000
          redmine_api_key: $API_KEY
          claude_api_key: dummy_key_for_testing
          rate_limit_per_minute: 60
          EOL
          
          echo "Created credentials.yaml with API key"
          
          # Cleanup
          rm -f cookies.txt
      
      - name: Run API connection test
        run: |
          chmod +x scripts/test_redmine_api.sh
          ./scripts/test_redmine_api.sh