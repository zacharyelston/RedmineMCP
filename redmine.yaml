redmine:
  title: "Redmine MCP Bootstrap Project"
  description: "Configuration for accessing and managing the Bootstrap project in Redmine"
  
# Server information kept for reference only - use MCP tools for all interactions
server_reference:
  url: "http://localhost:3000"
  api_key: "7a4ed5c91b405d30fda60909dbc86c2651c38217"  # Admin API key
  
project:
  id: 1  # MCP Project ID
  name: "MCP Project"
  
  # Current project structure - updated with subprojects
  subprojects:
    - id: 4
      name: "Hosted"
      identifier: "hosted"
      description: "The hosted dev/test/prod environment configuration"
    
    - id: 5
      name: "bugs"
      identifier: "bugs"
      description: "Bug tracking and issue management"
    
    - id: 6
      name: "docs"
      identifier: "docs"
      description: "Documentation for MCP project"
    
    - id: 7
      name: "features"
      identifier: "features"
      description: "New feature development"

    - id: 10
      name: "BootStrap"
      identifier: "bootstrap"
      description: "Bootstrap subproject for MCP implementation"
  
  # Current project structure categories
  categories:
    - "Backend"
    - "Frontend"
    - "Documentation"
    - "Infrastructure"
  
  # Issue trackers
  trackers:
    - id: 1
      name: "Bug"
    - id: 2
      name: "Feature"
    - id: 3
      name: "Support"
    - id: 4
      name: "MCP Test Case"
    - id: 5
      name: "MCP Documentation"
  
  # Priority levels
  priorities:
    - id: 1
      name: "Low"
    - id: 2
      name: "Normal"
    - id: 3
      name: "High"
    - id: 4
      name: "Urgent"
  
  # Issue statuses
  statuses:
    - id: 1
      name: "New"
    - id: 2
      name: "In Progress"
    - id: 3
      name: "Resolved"
    - id: 5
      name: "Closed"

# Error handling and logging configuration
error_handling:
  enabled: true
  log_to_file: true
  create_issues: true
  
  # Error logging levels
  log_levels:
    - critical  # System failures that require immediate attention
    - error     # Operation failures that prevent functionality
    - warning   # Potential issues that don't immediately impact functionality
    - info      # General information about system operation
  
  # Log file configuration
  log_files:
    primary: "logs/redmine-mcp.log"
    todo: "todo.yaml"  # For manual tracking
    format: "yaml"     # Format to use for structured logs
  
  # Issue creation settings for error logging
  issue_creation:
    enabled: true
    project_id: 5      # bugs project
    tracker_id: 1      # Bug tracker
    priority_map:
      critical: 4      # Urgent
      error: 3         # High
      warning: 2       # Normal
      info: 1          # Low
    template: |
      ## Automated Error Report
      
      **Error Level:** {level}
      **Timestamp:** {timestamp}
      **Component:** {component}
      **Operation:** {operation}
      
      ### Error Details
      ```
      {error_message}
      ```
      
      ### Stack Trace
      ```
      {stack_trace}
      ```
      
      ### Context
      {context}
      
      ### Recommended Action
      {action}

bootstrap_structure:
  main_issue: 8  # Bootstrap MCP Project Structure
  
  # Main component groups
  components:
    initial_setup:
      description: "Initial setup tasks for the project"
      issues: [9, 10, 11, 12]  # Setup Node.js, Create MCP Server, Implement API Client, Validate Setup
    
    core_functionality:
      description: "Core functionality features"
      issues: [13, 14, 15, 16, 17]  # Project listing, Issue listing, Command handlers, Error handling, Testing
    
    integration:
      description: "Integration with Claude and testing"
      issues: [18, 19, 20, 21]  # Claude Desktop testing, Example commands, Documentation, Validation
  
  # High priority tasks
  high_priority:
    description: "High priority tasks that need immediate attention"
    issues: [22, 23, 24, 25, 26, 27, 28, 29, 30]  # Unit tests, Integration tests, CI/CD, etc.
  
  # Medium priority tasks
  medium_priority:
    description: "Medium priority tasks for future implementation"
    issues: [31, 32, 33, 34]  # File attachments, Custom fields, Time tracking, Caching
  
  # Low priority tasks
  low_priority:
    description: "Low priority tasks for long-term development"
    issues: [35, 36, 37]  # MCP Protocol research, Structured logging, Response formatting

# Hosted environment structure
hosted_structure:
  main_issue: 38  # Hosted MCP Environment
  
  # Environment setup
  environments:
    description: "Environment setup for development, testing, and production"
    issues: [39, 40, 41]  # Development, Testing, Production
  
  # Infrastructure and operations
  operations:
    description: "Infrastructure and operational components"
    issues: [42, 43, 44, 45]  # CI/CD, Monitoring, Cost Management, Security

# Documentation structure
documentation_structure:
  # Basic usage documentation (completed)
  basic_usage:
    ticket_id: 20
    description: "Basic usage documentation for Redmine MCP"
    files:
      - "docs/basic-usage.md"
      - "docs/quick-reference.md"
      - "docs/examples/basic-operations.js"
      - "docs/examples/common-workflows.js"
      - "docs/README.md"
    completion_ticket: 46
    notes: "Completed on 2025-04-15. See issue #46 in the docs subproject for details."
  
  # Pending documentation tasks
  pending_documentation:
    - ticket_id: 19
      description: "Create Simple Example Commands"
      priority: "Normal"
    - ticket_id: 28
      description: "Create Comprehensive API Documentation"
      priority: "High"
    - ticket_id: 29
      description: "Add Examples for All MCP Tools"
      priority: "High"
    - ticket_id: 30
      description: "Update Claude Integration Guide"
      priority: "High"
    - ticket_id: 35
      description: "Investigate MCP Protocol Changes Between Versions"
      priority: "Low"

# Users with roles in the project
users:
  - id: 1
    login: "admin"
    name: "Redmine Admin"
    role: "Administrator"
  
  - id: 2
    login: "testuser"
    name: "Test User"
    role: "Reporter"
  
  - id: 3
    login: "developer"
    name: "Developer"
    role: "Developer"
  
  - id: 4
    login: "manager"
    name: "Manager"
    role: "Manager"

# Development workflow
development_workflow:
  git_workflow:
    description: "Git workflow for development tasks"
    steps:
      - "Always check out a new feature branch from the master branch before starting any work"
      - "Use descriptive branch names with ticket numbers (e.g., feature/docs-20-basic-usage)"
      - "Run tests before committing changes"
      - "Create a pull request when work is completed"
      - "Ensure CI passes before merging"
    
    branch_naming:
      pattern: "{type}/{ticket-id}-{short-description}"
      examples:
        - "feature/docs-20-basic-usage"
        - "bugfix/api-15-status-update"
        - "docs/mcp-28-api-documentation"
      
    commands:
      checkout_master: "git checkout master"
      update_master: "git pull origin master"
      create_branch: "git checkout -b feature/ticket-id-description"
      check_status: "git status"
      add_files: "git add ."
      commit: "git commit -m 'TICKET-ID: Description of changes'"
      push: "git push origin feature/ticket-id-description"
    
    notes: |
      Always start work by checking out the master branch and pulling the latest changes:
      
      ```bash
      git checkout master
      git pull origin master
      git checkout -b feature/ticket-id-description
      ```
      
      This ensures you're working from the latest codebase and prevents merge conflicts.
      Never commit directly to the master branch. Always create a feature branch for your work.

# MCP command examples for working with the Redmine project
mcp_tools:
  redmine_projects_list:
    description: "List all accessible Redmine projects"
    example: "redmine_projects_list({limit: 100})"
  
  redmine_projects_get:
    description: "Get details of a specific Redmine project"
    example: "redmine_projects_get({identifier: 'mcp-project', include: ['trackers', 'issue_categories']})"
  
  redmine_projects_create:
    description: "Create a new project or subproject"
    example: "redmine_projects_create({name: 'New Project', identifier: 'new-project', description: 'Project description', is_public: true, parent_id: 1})"
    notes: |
      This function was added to fix issue #76 as it was missing from the original implementation.
      When creating subprojects, always verify the parent_id is correct and validate after creation.
      The parent-child relationship should be verified after creation to ensure it was established correctly.
  
  redmine_issues_list:
    description: "List issues with optional filtering"
    example: "redmine_issues_list({project_id: 1, limit: 100})"
  
  redmine_issues_get:
    description: "Get details of a specific issue"
    example: "redmine_issues_get({issue_id: 8})"
  
  redmine_issues_create:
    description: "Create a new issue"
    example: "redmine_issues_create({project_id: 1, subject: 'New task', description: 'Task description', tracker_id: 2, priority_id: 2, assigned_to_id: 1})"
  
  redmine_issues_update:
    description: "Update an existing issue"
    example: "redmine_issues_update({issue_id: 8, subject: 'Updated title', status_id: 2})"
    notes: |
      When moving issues between projects, this function requires special handling.
      Recent updates to RedmineClient.ts resolve issues with project transfers.
      The key insight was that project transfers need to preserve all existing issue data.
    
  redmine_users_current:
    description: "Get information about the current user"
    example: "redmine_users_current({})"

# Common workflows
workflows:
  add_time_tracking:
    description: "Add time tracking to an issue"
    steps:
      - "Use redmine_issues_update to update the estimated_hours field"
      - "Example: redmine_issues_update({issue_id: 8, estimated_hours: 24})"
  
  change_issue_status:
    description: "Change the status of an issue"
    steps:
      - "Use redmine_issues_update to update the status_id field"
      - "Example: redmine_issues_update({issue_id: 8, status_id: 2})"
      - "Note: Status changes may be restricted by workflow rules. If updates fail, create a new confirmation issue."
  
  reassign_issue:
    description: "Reassign an issue to a different user"
    steps:
      - "Use redmine_issues_update to update the assigned_to_id field"
      - "Example: redmine_issues_update({issue_id: 8, assigned_to_id: 3})"
  
  move_issue_to_project:
    description: "Move an issue to a different project"
    steps:
      - "Use redmine_issues_update to update the project_id field"
      - "Example: redmine_issues_update({issue_id: 8, project_id: 4})"
      - "Note: This operation requires enhanced handling in the API client"
      
  create_subproject:
    description: "Create a subproject under an existing project"
    steps:
      - "Use the redmine_projects_create MCP function with parent_id parameter"
      - "Example: redmine_projects_create({name: 'Subproject Name', identifier: 'subproject-identifier', description: 'Description', is_public: true, parent_id: 1})"
      - "Note: All errors will be logged according to the error_handling configuration"
      - "Verify successful creation by fetching the project details after creation"

# Implementation notes
implementation_notes:
  api_client_insights:
    - "When transferring issues between projects, the complete issue data must be preserved"
    - "The Redmine API requires all relevant fields to be included in project transfer requests"
    - "The enhanced RedmineClient.ts implementation fetches current issue data before updating"
    - "Special handling is needed for project_id updates to maintain issue integrity"
    - "Including notes with project transfers helps with tracking changes"
  
  common_pitfalls:
    - "Simple parameter updates work for most fields but not for project transfers"
    - "API returns success even when project transfers silently fail"
    - "Missing fields in update payload can cause project transfers to fail"
    - "Detailed error logging is essential for troubleshooting Redmine API interactions"
    - "Always verify issue location after project transfers"
    - "Issue status updates may fail due to workflow restrictions"
    - "When status updates fail, create a new confirmation issue rather than repeatedly trying to update"
    - "Working directly on master branch can cause conflicts - always create feature branches"

  error_handling_best_practices:
    - "All API operations should include proper error handling and logging"
    - "Failed operations must be reported through both logs and issue creation"
    - "Error logs should provide sufficient context for troubleshooting"
    - "Error messages to users should be clear and actionable"
    - "Critical failures should trigger immediate notifications"
    - "Operations should validate success rather than assuming API success responses are accurate"
    - "Destructive operations should be verified with a separate API call after completion"
    - "Failed subproject creation should be logged to todo.yaml and create a bug ticket"

# Session notes for progress tracking and next steps
session_history:
  - session_date: "2025-04-15"
    session_topics: 
      - "Fixed issue #76: Subproject creation failure and error logging implementation"
      - "Added missing redmine_projects_create MCP function"
      - "Created BootStrap subproject (ID: 10) under MCP Project"
    completed_tasks:
      - "Fixed RedmineClient.ts to properly handle subproject creation"
      - "Implemented comprehensive error logging to todo.yaml and via issue creation"
      - "Added proper parent project verification and wait time for database updates"
      - "Created and ran tests to verify the implementation works correctly"

# File organization configuration - ADDED 2025-04-15
file_organization:
  # Disable creation of issue-specific directories
  create_issue_directories: false
  # Use issue notes for implementation details
  use_issue_notes: true
  # Store any necessary files directly in appropriate locations
  issue_files_pattern: "{file_type}-issue-{issue_number}.md"
  # How to handle existing issue directories
  existing_issue_directories: "preserve"
  
  # Example note templates
  note_templates:
    implementation_plan: |
      ## Implementation Plan
      
      ### Overview
      [Brief description of the implementation approach]
      
      ### Steps
      1. [First step]
      2. [Second step]
      3. [Third step]
      
      ### Technical Details
      [Any technical details or considerations]
      
      ### Dependencies
      [List of dependencies or prerequisites]
    
    implementation_summary: |
      ## Implementation Summary
      
      ### Completed Work
      [Description of what was implemented]
      
      ### Key Decisions
      [Important decisions made during implementation]
      
      ### Technical Notes
      [Technical details about the implementation]
      
      ### Testing
      [How the implementation was tested]
    
    status_update: |
      ## Status Update
      
      ### Progress
      - [Task 1]: Completed
      - [Task 2]: In progress (XX% complete)
      - [Task 3]: Not started
      
      ### Blockers
      [Any blockers or issues encountered]
      
      ### Next Steps
      [What will be worked on next]
    next_session_tasks:
      - "Consider implementing automated tests for subproject creation functionality"
      - "Update documentation to include information about the new redmine_projects_create function"
      - "Review other MCP functions for potential improvements in error handling"
      - "Consider adding TypeScript interfaces for all MCP functions' parameters and return types"
      - "Add unit tests for the error logging functionality"
    fix_validation:
      issue_76:
        status: "Resolved"
        verification_method: "Created BootStrap subproject with proper parent association"
        test_script: "fixes/issue-76/test-bootstrap-subproject.js"
        documentation: "fixes/issue-76/issue-76-implementation-summary.md"

# Notes for future development
notes: |
  The Bootstrap project has been created as a set of issues in the MCP Project in Redmine.
  Each issue represents a component or task from the Redmine MCP codebase structure.
  The issues are organized by priority and component groups, reflecting the structure 
  in the TODO.md and NEXT_STEPS.md files.
  
  Project structure has been enhanced with subprojects for better organization:
  1. Hosted: Contains all hosted environment infrastructure and operations
  2. bugs: Dedicated to bug tracking and issue management
  3. docs: Houses all documentation-related issues
  4. features: Contains all feature development tasks
  5. BootStrap: Bootstrap subproject for MCP implementation (added 2025-04-15)
  
  Always use the MCP tools provided in this file for interacting with the Redmine project.
  Direct API calls should be avoided in favor of the MCP protocol.
  
  Development Workflow Guidelines:
  1. ALWAYS check out a new branch from master before starting any work
  2. Use descriptive branch names that include the ticket number (e.g., feature/docs-20-basic-usage)
  3. Commit regularly with meaningful commit messages that reference the ticket
  4. Create a pull request when the work is complete for team review
  5. Never commit directly to the master branch
  
  Improvements made to the codebase:
  1. Enhanced RedmineClient.ts with proper issue project transfer support
  2. Added detailed error logging for better troubleshooting
  3. Implemented special handling for project_id updates
  4. Fixed subproject creation and added missing redmine_projects_create function (2025-04-15)
  5. Implemented comprehensive error logging to todo.yaml and via issue creation (2025-04-15)
  
  MCP Integration Documentation Progress:
  1. Basic usage documentation has been completed (ticket #20, confirmation #46)
      - docs/basic-usage.md - Comprehensive guide to using Redmine MCP
      - docs/quick-reference.md - Quick reference for common operations
      - docs/examples/basic-operations.js - Example script for basic operations
      - docs/examples/common-workflows.js - Example script for common workflows
      - docs/README.md - Overview of documentation structure
  2. Several documentation tickets still pending (see documentation_structure section)
  
  Issue Status Update Notes:
  1. When updating issue statuses, be aware that Redmine workflow restrictions may prevent changes
  2. If status updates fail despite receiving "success" responses, create a confirmation issue
  3. Check issue journals to verify if status changes were applied
  4. Consider using credentials.yaml API key instead of the key in server_reference
  
  Error Handling Guidelines:
  1. All operations must include robust error handling
  2. API failures must be logged according to the error_handling configuration
  3. Critical errors should be logged to both the log file and todo.yaml
  4. Create Redmine issues for significant failures to ensure visibility
  5. All errors must include sufficient context for troubleshooting
  6. Never assume an operation succeeded based on API response alone - always verify
  7. Failed subproject creation must generate both logs and issues for tracking
  
  Future enhancements to consider:
  1. Create proper parent-child relationships between issues
  2. Add estimated hours for better time tracking
  3. Create more detailed work breakdown structures
  4. Add milestone tracking with due dates
  5. Implement version management for releases
  6. Enhance error handling and validation in all API client functions
  7. Add comprehensive automated testing for API client functionality
  8. Improve caching for better performance
  9. Add documentation for using API with workflow restrictions
  10. Consider implementing automated tests for subproject creation functionality (proposed 2025-04-15)
  11. Update documentation to include information about redmine_projects_create (proposed 2025-04-15)
  12. Add TypeScript interfaces for all MCP functions' parameters and return types (proposed 2025-04-15)
  
  Important Implementation Insights (2025-04-15):
  1. The Redmine API returns success even when operations like subproject creation silently fail
  2. Always verify operations after completion to ensure they have the expected effect
  3. Wait time (e.g., 3 seconds) after creation helps ensure database updates are complete
  4. Type safety is critical - explicit Number conversion for parent_id was needed
  5. The MCP API should match the functionality provided by the RedmineClient class
  6. Issue implementation details should be stored as notes directly in the Redmine issue via redmine_issues_update
